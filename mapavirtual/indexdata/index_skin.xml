<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

    
  <!-- Spot Style - Default Point Spot Style 1 -->
  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint0.png"
         visible="false"

         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         onloaded="setdefaultanimatedspotframe();startspotanimation(0.1);"

         alpha="0.8"
         onhover="onhoverIconDefaultPointSpotStyle1"
         onover="onoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"
         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip(hotspot);
  </action>
  <action name="onoverIconDefaultPointSpotStyle1">
tween(scale, 1.2);
tween(alpha, 1);
pauseautorotation();
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();
tween(scale, 1);
tween(alpha, 0.8);
resumeautorotation();
  </action>

          <!-- unsupported kind of display : PointMap -->

  <!-- ************ -->
  <!-- iControl Bar -->
  <!-- ************ -->


  <krpano theme11barbuilt="false" theme11backgroundwidthwhenclosed="0" theme11backgroundwidthwhenopened="0" theme11IsOpened="false" />
  <events name="theme11events" onxmlcomplete="theme11buildMenuBar();" keep="true"/>
  <action name="theme11buildMenuBar">
    ifnot (theme11barbuilt, theme11buildMenu(); set(theme11barbuilt, true););
  </action>

  <style name="theme11_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip(bottom, '', bottom);"
         onout="hideTooltip();"
         />

  <layer name="theme11_menu_bg"
         keep="true"
         type="container"
         zorder="0"
         width="40"
         height="40"
         align="bottom"
         x="0" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >


    <layer name="theme11btn_in"
            url="%FIRSTXML%/graphics/icontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_izoomInTip"
            devices="desktop"
            />
    <layer name="theme11btn_out"
            url="%FIRSTXML%/graphics/icontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_izoomOutTip"
            devices="desktop"
            />

    <layer name="theme11btn_home"
           url="%FIRSTXML%/graphics/icontrolbar/btn_home.png"
           style="theme11_btn_style"
           onclick="theme11btn_home_action();"
           visible="false"
           tooltip="controlBar_ihomeTip"
           />

    <layer name="theme11btn_left"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_left.png"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_imoveLeftTip"
            devices="desktop"
            />
    <layer name="theme11btn_right"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_right.png"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_imoveRightTip"
            devices="desktop"
            />

    <layer name="theme11btn_up"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_up.png"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_imoveUpTip"
            devices="desktop"
            />
    <layer name="theme11btn_down"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_down.png"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_imoveDownTip"
            devices="desktop"
            />




    <layer name="theme11btn_display_floorplan"
            url="%FIRSTXML%/graphics/icontrolbar/btn_floorplan.png"
            onclick="showFloorplan();"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_idisplayFloorplanTip"
            />
    <layer name="theme11btn_hide_floorplan"
            url="%FIRSTXML%/graphics/icontrolbar/btn_floorplan.png"
            onclick="hideFloorplan();"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_ihideFloorplanTip"
            />


    <layer name="theme11btn_openfs"
            url="%FIRSTXML%/graphics/icontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme11_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_iopenFsTip"
            />
    <layer name="theme11btn_closefs"
            url="%FIRSTXML%/graphics/icontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme11_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_icloseFsTip"
            />

    <layer name="theme11btn_autorotate_on"
            url="%FIRSTXML%/graphics/icontrolbar/btn_start_autorotation.png"
            onclick="startautorotation();"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_iautorotateOnTip"
            />
    <layer name="theme11btn_autorotate_off"
            url="%FIRSTXML%/graphics/icontrolbar/btn_stop_autorotation.png"
            onclick="stopautorotation();"
            style="theme11_btn_style"
            visible="false"
            tooltip="controlBar_iautorotateOffTip"
            />



    <layer name="theme11btn_display_help"
            url="%FIRSTXML%/graphics/icontrolbar/btn_help.png"
            onclick="theme11displayHelp();"
            style="theme11_btn_style"
            devices="desktop"
            visible="false"
            tooltip="controlBar_idisplayHelpTip"
            />
    <layer name="theme11btn_close_help"
            url="%FIRSTXML%/graphics/icontrolbar/btn_help.png"
            onclick="theme11closeHelp();"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            tooltip="controlBar_ihideHelpTip"
            />



    <layer name="theme11btn_hidecontrols"
           url="%FIRSTXML%/graphics/icontrolbar/btn_hide_controls.png"
           style="theme11_btn_style"
           onclick="hideTourControls();"
           visible="false"
           tooltip="controlBar_ihideControlsTip"
           />
    <layer name="theme11btn_showcontrols"
           url="%FIRSTXML%/graphics/icontrolbar/btn_show_controls.png"
           style="theme11_btn_style"
           onclick="showTourControls();"
           tooltip="controlBar_idisplayControlsTip"
           visible="false"
           />
 </layer>

    <action name="theme11btn_home_action">
      lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
    </action>



	<events name="theme11hideshowcontrolsevent" 
		hidetourcontrols="theme11hideMenuControls();" 
		showtourcontrols="theme11showMenuControls();" 
		keep="true" />

  <action name="theme11hideMenuControls">
    set(theme11IsOpened, false);
    set(layer[theme11btn_hidecontrols].visible, false);
    set(layer[theme11btn_showcontrols].visible, true);


set(layer[theme11btn_home].visible, false);
if (device.desktop,
	set(layer[theme11btn_in].visible, false);
	set(layer[theme11btn_out].visible, false);
);
if (device.desktop,
	set(layer[theme11btn_up].visible, false);
	set(layer[theme11btn_down].visible, false);
);
if (device.desktop,
	set(layer[theme11btn_left].visible, false);
	set(layer[theme11btn_right].visible, false);
);
	theme11updateFullscreenButtons();
	theme11updateHelpButtons();


	theme11updateAutorotationButtons();



	theme11updateFloorplanButtons();


    set(layer[theme11_menu_bg].width , get(theme11backgroundwidthwhenclosed));
	set(layer[theme11_menu_bg].visible, true);
  </action>
  <action name="theme11showMenuControls">
    set(theme11IsOpened, true);
    set(layer[theme11btn_hidecontrols].visible, true);
    set(layer[theme11btn_showcontrols].visible, false);
	set(layer[theme11_menu_bg].visible, true);


set(layer[theme11btn_home].visible, true);
if (device.desktop,
	set(layer[theme11btn_in].visible, true);
	set(layer[theme11btn_out].visible, true);
);
if (device.desktop,
	set(layer[theme11btn_up].visible, true);
	set(layer[theme11btn_down].visible, true);
);
if (device.desktop,
	set(layer[theme11btn_left].visible, true);
	set(layer[theme11btn_right].visible, true);
);
	theme11updateFullscreenButtons();
	theme11updateHelpButtons();


	theme11updateAutorotationButtons();



	theme11updateFloorplanButtons();


    set(layer[theme11_menu_bg].width, get(theme11backgroundwidthwhenopened));
  </action>

  <layer name="theme11helpScreenBg"
         align="center"
         keep="true"
         onclick="theme11closeHelp();"
         url="%FIRSTXML%/graphics/icontrolbar/help_screen_bg.png"
         visible="false"
         rotate="-90"
         height="50%"
         width="prop"
         zorder="97"
         x="100%" />
  <layer name="theme11helpScreenFg"
         align="center"
         keep="true"
         onclick="theme11closeHelp();"
         url="%FIRSTXML%/graphics/icontrolbar/help_screen_fg.png"
         height="50%"
         width="prop"
         visible="false"
         rotate="90"
         zorder="98"
         x="-100%"
         displayed="false" />
  <action name="theme11displayHelp">
  if (device.desktop,
    set(layer[theme11helpScreenFg].displayed,true);
    set(layer[theme11helpScreenBg].visible,true);
    set(layer[theme11helpScreenFg].visible,true);
    tween(layer[theme11helpScreenFg].rotate,0, 1);
    tween(layer[theme11helpScreenFg].x,0, 1);
    tween(layer[theme11helpScreenBg].rotate,0, 1);
    tween(layer[theme11helpScreenBg].x,0, 1);
    theme11updateHelpButtons();
  );
  </action>
  <action name="theme11closeHelp">
  if (device.desktop,
    set(layer[theme11helpScreenFg].displayed,false);
    tween(layer[theme11helpScreenFg].rotate,  90, 1, easeOutQuad, set(layer[theme11helpScreenFg].visible,false););
    tween(layer[theme11helpScreenFg].x, -100%, 1);
    tween(layer[theme11helpScreenBg].rotate, -90, 1, easeOutQuad, set(layer[theme11helpScreenBg].visible,false););
    tween(layer[theme11helpScreenBg].x, 100%, 1);
    theme11updateHelpButtons();
  );
  </action>
	<action name="theme11HideHelpButtons">
		set(layer[theme11btn_display_help].visible, false);
		set(layer[theme11btn_close_help].visible, false);
	</action>
	<action name="theme11ShowHelpButtons">
		if (layer[theme11helpScreenFg].displayed,
			set(layer[theme11btn_close_help].visible, true);
			set(layer[theme11btn_display_help].visible, false);
		,
			set(layer[theme11btn_display_help].visible, true);
			set(layer[theme11btn_close_help].visible, false);
		);
	</action>
	<action name="theme11updateHelpButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			theme11ShowHelpButtons();
		,
			theme11HideHelpButtons();
		);
	,
		theme11HideHelpButtons();
	);
	</action>


	<events name="theme11DisplayFloorPlanEvents" 
		onshowtourfloorplan="theme11updateFloorplanButtons();" 
		onhidetourfloorplan="theme11updateFloorplanButtons();" 
		keep="true" />
	<action name="theme11HideFloorplanButtons">
		set(layer[theme11btn_display_floorplan].visible, false);
		set(layer[theme11btn_hide_floorplan].visible, false);
	</action>
	<action name="theme11ShowFloorplanButtons">
		if (tour_displayfloorplan,
			set(layer[theme11btn_hide_floorplan].visible, true);
			set(layer[theme11btn_display_floorplan].visible, false);
		,
			set(layer[theme11btn_display_floorplan].visible, true);
			set(layer[theme11btn_hide_floorplan].visible, false);
		);
	</action>
	<action name="theme11updateFloorplanButtons">
		if (tour_displaycontrols,
			theme11ShowFloorplanButtons();
		,
			theme11HideFloorplanButtons();
		);
	</action>



  <events name="theme11menufullscreenchangeevent"
          onenterfullscreen="theme11updateFullscreenButtons();"
          onexitfullscreen="theme11updateFullscreenButtons();"
          keep="true"/>
	<action name="theme11HideFullscreenButtons">
		set(layer[theme11btn_openfs].visible , false);
		set(layer[theme11btn_closefs].visible, false);
	</action>
	<action name="theme11ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme11btn_openfs].visible , false);
				set(layer[theme11btn_closefs].visible, true);
			,
				set(layer[theme11btn_openfs].visible ,true);
				set(layer[theme11btn_closefs].visible,false);
			);
		,
			theme11HideFullscreenButtons();
		);
	</action>
	<action name="theme11updateFullscreenButtons">
		if (tour_displaycontrols,
			theme11ShowFullscreenButtons();
		,
			theme11HideFullscreenButtons();
		);
	</action>

	<events name="theme11AutorotationEvents"
		onstartautorotation="theme11updateAutorotationButtons();"
		onresumeautorotation="theme11updateAutorotationButtons();"
		onstopautorotation="theme11updateAutorotationButtons();"
		onpauseautorotation="theme11updateAutorotationButtons();"
		keep="true"/>
	<action name="theme11HideAutorotationButtons">
		set(layer[theme11btn_autorotate_off].visible, false);
		set(layer[theme11btn_autorotate_on].visible , false);
	</action>
	<action name="theme11ShowAutorotationButtons">
		if(tour_autorotateenabled==false,
			set(layer[theme11btn_autorotate_off].visible, false);
			set(layer[theme11btn_autorotate_on].visible , true);
		,
			set(layer[theme11btn_autorotate_off].visible, true);
			set(layer[theme11btn_autorotate_on].visible , false);
		);
	</action>
	<action name="theme11updateAutorotationButtons">
		if (tour_displaycontrols,
			theme11ShowAutorotationButtons();
		,
			theme11HideAutorotationButtons();
		);
	</action>



  <action name="theme11buildMenu">
    
    set(theme11button_pos, 0);

	set(theme11backgroundwidthwhenclosed, 40);
    set(layer[theme11btn_hidecontrols].x, get(theme11button_pos));
    set(layer[theme11btn_showcontrols].x, get(theme11button_pos));
    inc(theme11button_pos, 45);



      if (device.desktop,
        set(layer[theme11btn_display_help].x, get(theme11button_pos));
        set(layer[theme11btn_close_help].x  , get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[theme11btn_openfs].x , get(theme11button_pos));
        set(layer[theme11btn_closefs].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );


      set(layer[theme11btn_display_floorplan].x , get(theme11button_pos));
      set(layer[theme11btn_hide_floorplan].x    , get(theme11button_pos));
      inc(theme11button_pos, 45);


      set(layer[theme11btn_autorotate_on].x , get(theme11button_pos));
      set(layer[theme11btn_autorotate_off].x, get(theme11button_pos));
      inc(theme11button_pos, 45);





        set(layer[theme11btn_home].x, get(theme11button_pos));
        inc(theme11button_pos, 45);

      if (device.desktop,
        set(layer[theme11btn_right].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_left].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme11btn_down].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_up].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme11btn_out].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_in].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      dec(theme11button_pos, 5);

      set(theme11backgroundwidthwhenopened, get(theme11button_pos));
      set(layer[theme11_menu_bg].width, get(theme11backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="theme11StartTourEvents" onTourStart="theme11CallOnStartTour();" keep="true" />
	
	<action name="theme11CallOnStartTour">
		
		showTourControls();
	</action>

<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="website1" onclick="getmessage(urltoopen,contextmenuwebsiteurl1);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();" separator="true"/>
    <item name="fisheye"       onclick="setViewFisheye();"/>
    <item name="architectural" onclick="setViewArchitectural();"/>
    <item name="stereographic" onclick="setViewStereographic();"/>
    <item name="pannini"       onclick="setViewPannini();"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();"/>
    <item name="fisheyeball"   onclick="setViewFisheyeBall();"/>
    <item name="fullscreenentry" onclick="enterFullscreen();" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[website1].caption, contextmenuopenwebsitelabel1);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[fisheye].caption, contextmenufisheyelabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    getmessage(contextmenu.item[stereographic].caption, contextmenustereographiclabel);
    getmessage(contextmenu.item[pannini].caption, contextmenupanninilabel);
    getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    getmessage(contextmenu.item[fisheyeball].caption, contextmenufisheyeballlabel);
    if(tour_fullscreen,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, exitFullscreen(););
     ,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, enterFullscreen(););
    );
  </action>
  <!-- ************ -->
  <!-- Logo : viewport / topleft -->
  <!-- ************ -->

  <layer align="topleft"
         x="10"
         y="10"
         zorder="2"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logotooltipText"
			onhover="showTooltip(topleft,'');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logo4.png" 
         onclick="openurl(http://motelsensaciones.com/,_blank);"


         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>




  <!-- ************************* -->
  <!-- Progress Bar and Loopings -->
  <!-- ************************* -->
  <progress showload="none"
			showwait="loopings(
				0xffffff,
				15,15,
				0,0,
				0xffffff,8,
				0,0,center
				)"
			showreloads="false"
			parent=""
			/>
  <!-- ******************** -->
  <!-- Combobox : panoramas -->
  <!-- ******************** -->


<events name="combopanolistallpanoramasStartTourEvents" onTourStart="set(layer[combopanolistallpanoramas].isStarted, true);if(layer[combopanolistallpanoramas].isLoaded,combopanolistallpanoramasShow(););" keep="true" />


  <layer name="combopanolistallpanoramas"
         url="%FIRSTXML%/graphics/combobox.swf"
         alturl="%FIRSTXML%/graphics/combobox.js"
         keep="true"
         visible="false"
         zorder="4"
         align="topright"
         x="30" y="10"
         rowcount="10"
         onloaded="combopanolistallpanoramasLoaded();"
         isStarted="false"
         isLoaded="false"
         itemcount="0"
         />

  <action name="combopanolistallpanoramasLoaded">
    
    layer[combopanolistallpanoramas].removeAll();
    set(layer[combopanolistallpanoramas].itemcount, 0);
    
    combopanolistallpanoramasAddItem(pano14_title, pano14, pano14, false);
    combopanolistallpanoramasAddItem(pano9_title, pano9, pano9, false);
    combopanolistallpanoramasAddItem(pano22_title, pano22, pano22, false);
    combopanolistallpanoramasAddItem(pano20_title, pano20, pano20, false);
    combopanolistallpanoramasAddItem(pano19_title, pano19, pano19, false);
    combopanolistallpanoramasAddItem(pano15_title, pano15, pano15, false);
    combopanolistallpanoramasAddItem(pano16_title, pano16, pano16, false);
    combopanolistallpanoramasAddItem(pano17_title, pano17, pano17, false);
    combopanolistallpanoramasAddItem(pano18_title, pano18, pano18, false);
    combopanolistallpanoramasAddItem(pano23_title, pano23, pano23, false);
    combopanolistallpanoramasAddItem(pano28_title, pano28, pano28, false);
    combopanolistallpanoramasAddItem(pano24_title, pano24, pano24, false);
    combopanolistallpanoramasAddItem(pano26_title, pano26, pano26, false);
    combopanolistallpanoramasAddItem(pano10_title, pano10, pano10, false);
    combopanolistallpanoramasAddItem(pano21_title, pano21, pano21, false);
    combopanolistallpanoramasAddItem(pano25_title, pano25, pano25, false);
    combopanolistallpanoramasAddItem(pano11_title, pano11, pano11, false);
    combopanolistallpanoramasAddItem(pano27_title, pano27, pano27, false);
    combopanolistallpanoramasAddItem(pano107_title, pano107, pano107, false);
    set(layer[combopanolistallpanoramas].isLoaded, true);
    
    if(layer[combopanolistallpanoramas].isStarted,
      combopanolistallpanoramasShow();
    );
  </action>


  <action name="combopanolistallpanoramasAddItem">
    getmessage(caption, %1);
    
    indexoftxt(found, get(caption), '&amp;');
    if(found GE 0,
      subtxt(part1, get(caption), 0, get(found));
      add(found, 5);
      subtxt(part2, get(caption), get(found), get(caption.length));
      txtadd(caption, get(part1), '&amp;', get(part2));
    );
    if(%4,
      txtadd(title, "&#x00A0;&#x00A0;&#x00A0;", get(caption));
    ,
      set(title, get(caption));
    );
    layer[combopanolistallpanoramas].addIdItem(%2, get(title), mainloadscene(%3));
    inc(layer[combopanolistallpanoramas].itemcount);
  </action>

  <events name="combopanolistallpanoramasEvents"
          hidetourcontrols="combopanolistallpanoramasHide();"
          showtourcontrols="combopanolistallpanoramasShow();"
          onnewpano="combopanolistallpanoramasOnPanorama();"
          keep="true"/>

  <action name="combopanolistallpanoramasHide">
    set(layer[combopanolistallpanoramas].visible, false);
  </action>
  <action name="combopanolistallpanoramasShow">
  if(layer[combopanolistallpanoramas].isLoaded,
    if (layer[combopanolistallpanoramas].itemcount GT 0,
      set(layer[combopanolistallpanoramas].visible, true);
    ,
      set(layer[combopanolistallpanoramas].visible, false);
    );
  ,
    set(layer[combopanolistallpanoramas].visible, false);
  );
  </action>

  <action name="combopanolistallpanoramasOnPanorama">
    combopanolistallpanoramasUpdateList();
  </action>


  <action name="combopanolistallpanoramasUpdateList">
    set(itemtoselect, get(scene[get(xml.scene)].name));
    layer[combopanolistallpanoramas].selectIdItem(get(itemtoselect));
  </action>


	<!-- ************** -->
	<!-- Thumbnails Bar -->
	<!-- ************** -->





<layer name="thumbnailsBar-thumbnailsBar" 
	keep="true" 
	type="container" 
	visible="false"
	align="right" 
	
		width="0" 
		height="100%" 
	
	x="0"
	y="0"
	
	bgcolor="0x818181"
	bgalpha="0.690196078431373"
	
	zorder="5"
/>



<layer name="thumbnailBorderSource-thumbnailsBar"
	keep="true"
	visible="false"
	
	borderWidth="3"
	borderColorDefault="0x6d6d6d" 
	borderColorHover="0x000000"
	borderColorSelected="0x000000"
	borderAlphaDefault="0.729411764705882" 
	borderAlphaHover="1"
	borderAlphaSelected="1"
	
	url=""
	offsetX="0"
	offsetY="0"
	quarterHeight="0"
/>

  <textstyle name="tooltipStyle-thumbnailsBar"
	font="Arial"
	fontsize="18.0"
	bold="false"
	italic="false"
	background="true"
	backgroundcolor="0xaeaeae"
	border="false"
	textcolor="0xffffff"
	alpha="0.8"
	blendmode="normal"
	origin="cursor"
	noclip="true"
	devices="flash"
	edge="right"
	textalign="right"
	xoffset="-20"
	yoffset="0"
  />
<layer name="tooltipStyle-thumbnailsBar"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0xaeaeae"
	backgroundalpha="0.8"
	border="false"
	css="color:#ffffff;font-family:Arial;font-size:18px;text-align:center;"
	width="200"
	height="20"
	autoheight="true"
	selectable="false"
	zorder="0"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	devices="html5"
	edge="right"
/>

	<krpano arrow1Loaded-thumbnailsBar="false" arrow2Loaded-thumbnailsBar="false" borderLoaded-thumbnailsBar="false" thumbnailsLoadedCounter-thumbnailsBar="0" thumbsCount-thumbnailsBar="0" thumbsCounter-thumbnailsBar="0" firstInit-thumbnailsBar="false" />
	
	
	<events name="thumbnailsScrollEvents-thumbnailsBar" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize-thumbnailsBar,set(isLoaded-thumbnailsBar, true);if(isStarted-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onTourStart="set(isStarted-thumbnailsBar, true);if(isLoaded-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar(););"
		onnewpano="if(startResize-thumbnailsBar,if(firstInit-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onresize="onResizeHandler-thumbnailsBar();"
		hidetourthumbnails="hideWithThumbnailsButton-thumbnailsBar();" 
		showtourthumbnails="showWithThumbnailsButton-thumbnailsBar();" 
		hidetourcontrols="hideWithControlsBar-thumbnailsBar();" 
		showtourcontrols="showWithControlsBar-thumbnailsBar();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
	/>
	
	
	<layer name="scrollAreaContainer-thumbnailsBar" 
		keep="true"
		type="container" 
		align="topleft"
		x="15"
		y="10"
		
		marginX="15"
		marginY="10"
		
		width="0" 
		height="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar-thumbnailsBar"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="100"
		itemHeight="50"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="true"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea-thumbnailsBar" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="right"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="v" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		tagertWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow1);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_up.png"
			align="top"
	/>
	
	
	
	<layer name="scrollNextArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow2);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_down.png"
			align="bottom"
	/>
	
	<action name="loadedImages-thumbnailsBar">
		if(%1 == "arrow1",
			set(arrow1Loaded-thumbnailsBar, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded-thumbnailsBar, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(borderLoaded-thumbnailsBar, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter-thumbnailsBar);
		);
	</action>
	
	<action name="onLoadCompleteHandler-thumbnailsBar">
		
		set(thumbsCount-thumbnailsBar, 0);
		
		
		set(thumbsCount-thumbnailsBar, get(scene.count));
		
		
		
		
		
		loadThumbs-thumbnailsBar();
		
		if(firstInit-thumbnailsBar,
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			onLoadCompleteHandlerPartTwo-thumbnailsBar();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo-thumbnailsBar">
		set(imgCounter-thumbnailsBar, 3);
		
		if(arrow1Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(arrow2Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(thumbsCount-thumbnailsBar == thumbnailsLoadedCounter-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadComplete-thumbnailsBar);
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadComplete-thumbnailsBar, 0.2, onLoadCompleteHandlerPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree-thumbnailsBar">
		resetMouseBehavior-thumbnailsBar();
		highlightCurrentThumb-thumbnailsBar();
		
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			mul(adjustWidth-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			add(adjustWidth-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width));
			mul(adjustHeight-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginY), 2);
			add(adjustHeight-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height));
			
			
			if(adjustWidth-thumbnailsBar GT stagewidth,
				set(adjustWidth-thumbnailsBar, get(stagewidth));
				set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
			,
				if(adjustHeight-thumbnailsBar GT stageheight,
					set(adjustHeight-thumbnailsBar, get(stageheight));
					set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
				);
			);
			
			setSize-thumbnailsBar(get(adjustWidth-thumbnailsBar), get(adjustHeight-thumbnailsBar));
		);
		
		setupArrows-thumbnailsBar(true);
		
		
		if (thumbsCounter-thumbnailsBar LE 0,
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		);
		
		
		set(startResize-thumbnailsBar, true);
		set(firstInit-thumbnailsBar, true);
	</action>
	
	
	<action name="onResizeHandler-thumbnailsBar">
		
		delayedcall(0.1, onResizeCallback-thumbnailsBar(false); );
	</action>
	
	
	<action name="onResizeCallback-thumbnailsBar">
		if(startResize-thumbnailsBar,
			setSize-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].targetWidth), get(layer[scrollAreaContainer-thumbnailsBar].targetHeight));
			setupArrows-thumbnailsBar(%1);
			
			
			if (thumbsCounter-thumbnailsBar LE 0,
				set(layer[thumbnailsBar-thumbnailsBar].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, true);
			onResizeCallback-thumbnailsBar(true);
		</action>
		
		<action name="hideWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
		<action name="showWithControlsBar-thumbnailsBar">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar-thumbnailsBar].visible, true);
					onResizeCallback-thumbnailsBar(true);
				,
					set(layer[thumbnailsBar-thumbnailsBar].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
	</action>
		
	
	<action name="thumbnailBorderImageInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		
		
		div(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight, get(layer[thumbnailBorderSource-thumbnailsBar].height), 4);
		
		
		set(cropX-thumbnailsBar, 0);
		set(cropY-thumbnailsBar, 0);
		set(cropW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width));
		set(cropH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropDefault, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));

		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropHover, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropSelected, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropVisited, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		set(scaleX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(scaleY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		sub(scaleW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width), get(totalOffsetX-thumbnailsBar));
		sub(scaleH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight), get(totalOffsetY-thumbnailsBar));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].scale9grid, get(scaleX-thumbnailsBar), '|', get(scaleY-thumbnailsBar), '|', get(scaleW-thumbnailsBar), '|', get(scaleH-thumbnailsBar));
	</action>
	
	
	<action name="loadThumbs-thumbnailsBar">
		
		

		loadThumbsPartTwo-thumbnailsBar();
	</action>
	
	<action name="loadThumbsPartTwo-thumbnailsBar">
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(imgCounter-thumbnailsBar, 1);
		,
			set(imgCounter-thumbnailsBar, 0);
		);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			if(borderLoaded-thumbnailsBar,
				dec(imgCounter-thumbnailsBar);
			);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar);
			loadThumbsPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar, 0.2, loadThumbsPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="loadThumbsPartThree-thumbnailsBar">
		ifnot(layer[scrollAreaContainer-thumbnailsBar].ready,
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				thumbnailBorderImageInit-thumbnailsBar();
			,
				thumbnailBorderDrawInit-thumbnailsBar();
			);
			
			
			set(thumbsCounter-thumbnailsBar, 0);
			
			
			set(i-thumbnailsBar-wait,25);
			
			
				for( set(i-thumbnailsBar, 0), i-thumbnailsBar LT scene.count, inc(i-thumbnailsBar),
					if(i-thumbnailsBar-wait == i-thumbnailsBar,
						add(i-thumbnailsBar-wait,25);
						wait(0);
					);
					createThumb-thumbnailsBar(get(scene[get(i-thumbnailsBar)].name), get(scene[get(i-thumbnailsBar)].thumburl), get(i-thumbnailsBar), get(scene[get(i-thumbnailsBar)].titleid));
					inc(thumbsCounter-thumbnailsBar);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount, get(thumbsCounter-thumbnailsBar));
			
			
			setSize-thumbnailsBar(get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width), get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height));
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar-thumbnailsBar();
				,
					hideWithControlsBar-thumbnailsBar();
				);
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].ready, true);
		);
	</action>
	
	
	<action name="setSize-thumbnailsBar">
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].targetWidth, %1);
		set(layer[scrollAreaContainer-thumbnailsBar].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, %2);
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		mul(totalMarginX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].x), 2);
		mul(totalMarginY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].y), 2);
		
			add(totalPluginWidth-thumbnailsBar, get(totalMarginX-thumbnailsBar), get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
			
			
			
			if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth LT totalPluginWidth-thumbnailsBar,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width, get(totalPluginWidth-thumbnailsBar));
			);
		
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		sub(containerWidth-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMarginX-thumbnailsBar));
		sub(containerHeight-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalMarginY-thumbnailsBar));

		
		set(layer[scrollAreaContainer-thumbnailsBar].width, get(containerWidth-thumbnailsBar));
		set(layer[scrollAreaContainer-thumbnailsBar].height, get(containerHeight-thumbnailsBar));
		
		set(scrollAreaSize-thumbnailsBar, 0);
		
		
		mul(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		sub(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, true);
		
		
			mul(scrollAreaSize-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight), get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount));
			add(scrollAreaSize-thumbnailsBar, get(totalThumbsSpacer-thumbnailsBar));

			set(layer[thumbsScrollArea-thumbnailsBar].width, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
			set(layer[thumbsScrollArea-thumbnailsBar].height, get(scrollAreaSize-thumbnailsBar));
			
			
			if(layer[scrollAreaContainer-thumbnailsBar].height LT layer[scrollAreaContainer-thumbnailsBar].itemHeight,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility-thumbnailsBar();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility-thumbnailsBar">
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible,
			set(boolValue-thumbnailsBar, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue-thumbnailsBar, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, get(boolValue-thumbnailsBar));
		);
	</action>
	
	
	<action name="createThumb-thumbnailsBar">

			add(offsetFactor-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
	
			mul(thumbIncPos-thumbnailsBar, %3, get(offsetFactor-thumbnailsBar));
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				add(thumbIncPos-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetY));
			);
			
		
		mul(negativeOffsetX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX), -1);
		mul(negativeOffsetY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea-thumbnailsBar);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages-thumbnailsBar("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer-thumbnailsBar].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer-thumbnailsBar].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].x, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
		
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea-thumbnailsBar);
				set(layer[get(thumbName)].y, get(thumbIncPos-thumbnailsBar));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].y, get(layer[scrollAreaContainer-thumbnailsBar].offsetY));
				set(layer[get(thumbName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
			);
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource-thumbnailsBar].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource-thumbnailsBar].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX-thumbnailsBar));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY-thumbnailsBar));
			set(layer[get(thumbBorderName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
		,
			
				set(layer[get(thumbBorderName)].y, get(thumbIncPos-thumbnailsBar)); 
				
		);
		
		
		setupMouseBehavior-thumbnailsBar(%1, %4);
		
	</action>
	
	
	<action name="removeThumb-thumbnailsBar">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows-thumbnailsBar">
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			hideArrows-thumbnailsBar();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer-thumbnailsBar].height LT layer[thumbsScrollArea-thumbnailsBar].height,
				
					showArrows-thumbnailsBar();
				,
					hideArrows-thumbnailsBar();
				);
			,
				hideArrows-thumbnailsBar();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb-thumbnailsBar();
		);
		
		
			
			if(layer[scrollAreaContainer-thumbnailsBar].height LT layer[scrollAreaContainer-thumbnailsBar].itemHeight,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows-thumbnailsBar">
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, true);
		set(layer[scrollNextArrow-thumbnailsBar].visible, true);
		
		
		
			
			add(totalArrowSize-thumbnailsBar, get(layer[scrollPrevArrow-thumbnailsBar].height), get(layer[scrollNextArrow-thumbnailsBar].height));
		
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalArrowSize-thumbnailsBar));
		
			set(layer[scrollAreaContainer-thumbnailsBar].height, get(scrollAreaContainerSize-thumbnailsBar));
		
			set(layer[scrollAreaContainer-thumbnailsBar].y, get(layer[scrollPrevArrow-thumbnailsBar].height));
			
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onhover, scrollPrev-thumbnailsBar(););
		set(layer[scrollNextArrow-thumbnailsBar].onhover, scrollNext-thumbnailsBar(););
		
		set(layer[scrollPrevArrow-thumbnailsBar].onclick, scrollPrev-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow-thumbnailsBar].onclick, scrollNext-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		set(layer[scrollNextArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows-thumbnailsBar">
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, false);
		set(layer[scrollNextArrow-thumbnailsBar].visible, false);
		
		
		
			mul(totalMargin-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginY), 2);
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalMargin-thumbnailsBar));
			
			set(layer[scrollAreaContainer-thumbnailsBar].height, get(scrollAreaContainerSize-thumbnailsBar));
			set(layer[scrollAreaContainer-thumbnailsBar].y, get(layer[scrollAreaContainer-thumbnailsBar].marginY));
			 
			
	</action>
	
	
	<action name="scrollPrev-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
		set(scrollLimit-thumbnailsBar, 0);
		
		
			
				sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height), get(layer[scrollAreaContainer-thumbnailsBar].height));
				div(scrollLimit-thumbnailsBar, 2);
			
			add(layer[thumbsScrollArea-thumbnailsBar].y, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].y GE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].y, get(scrollLimit-thumbnailsBar));
			);
			
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
			
			sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height), get(layer[scrollAreaContainer-thumbnailsBar].height));
			
				div(scrollLimit-thumbnailsBar, 2);
			mul(scrollLimit-thumbnailsBar, -1);
			
			sub(layer[thumbsScrollArea-thumbnailsBar].y, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].y LE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].y, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior-thumbnailsBar">
	
		
		
		
		set(j-thumbnailsBar-wait,25);
		
			for( set(j-thumbnailsBar, 0), j-thumbnailsBar LT scene.count, inc(j-thumbnailsBar),
				if(j-thumbnailsBar-wait == j-thumbnailsBar,
					add(j-thumbnailsBar-wait,25);
					wait(0);
				);
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j-thumbnailsBar)].name));
				txtadd(thumbBorderName, '-thumbnailsBar');
				
				setupMouseBehavior-thumbnailsBar(get(scene[get(j-thumbnailsBar)].name), get(scene[get(j-thumbnailsBar)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior-thumbnailsBar">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip(get(align), tooltipStyle-thumbnailsBar));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip(get(align), tooltipStyle-thumbnailsBar));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb-thumbnailsBar">
			highlightThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="highlightThumb-thumbnailsBar">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '-thumbnailsBar');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb-thumbnailsBar(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb-thumbnailsBar">
			scrollToThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb-thumbnailsBar">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');

			set(posY-thumbnailsBar, 0);
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				div(halfThumbHeight-thumbnailsBar, get(layer[get(thumbName)].height), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posY-thumbnailsBar, get(layer[get(thumbName)].y), get(halfThumbHeight-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(0, get(posY-thumbnailsBar));
				);
			,
				div(halfThumbHeight-thumbnailsBar, get(layer[get(thumbBorderName)].height), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posY-thumbnailsBar, get(layer[get(thumbBorderName)].y), get(halfThumbHeight-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(0, get(posY-thumbnailsBar));
				);
			);
		
		
	</action>






	
	<!-- ********* -->
	<!-- FloorPlan -->
	<!-- ********* -->
	
	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="ffffff" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="d5d5d5" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="ffffff" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="multiple" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="true" type="bool" />
			
			<option name="title" value="project_floor_title" type="string" />
			
			<option name="title_font" value="Verdana" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="false" type="bool" />
			<option name="close_on_click" value="true" type="bool" />
			<option name="zorder" value="6" type="int" />
		</settings>
		
		<floorplanItems selectedItem="fpitemmain" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
				
				<floorplanItem 
					name="fpitemmain" 
					width="1792" 
					height="731" 
					groupName="" 
					url="floorplan/mapa-ss-vectorizado.png" 
					title="project_floor_title"
					heading="0">
							<spot name="spotmap490" posX="0.186287" posY="0.15873" heading="0" desc="spotmap490_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano11" jsClick="spotmap490ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap491" posX="0.468305" posY="0.12381" heading="0" desc="spotmap491_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano27" jsClick="spotmap491ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap492" posX="0.13066" posY="0.15873" heading="0" desc="spotmap492_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano107" jsClick="spotmap492ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap493" posX="0.226391" posY="0.152381" heading="0" desc="spotmap493_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano107" jsClick="spotmap493ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap494" posX="0.282018" posY="0.149206" heading="0" desc="spotmap494_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano11" jsClick="spotmap494ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap496" posX="0.388098" posY="0.12381" heading="0" desc="spotmap496_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano27" jsClick="spotmap496ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap497" posX="0.425614" posY="0.120635" heading="0" desc="spotmap497_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano14" jsClick="spotmap497ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap498" posX="0.510996" posY="0.136508" heading="0" desc="spotmap498_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano21" jsClick="spotmap498ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap499" posX="0.5511" posY="0.136508" heading="0" desc="spotmap499_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano21" jsClick="spotmap499ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap500" posX="0.631307" posY="0.11746" heading="0" desc="spotmap500_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano10" jsClick="spotmap500ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap501" posX="0.600259" posY="0.126984" heading="0" desc="spotmap501_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano10" jsClick="spotmap501ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap503" posX="0.720569" posY="0.120635" heading="0" desc="spotmap503_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap503ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap504" posX="0.764554" posY="0.11746" heading="0" desc="spotmap504_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap504ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap505" posX="0.842173" posY="0.126984" heading="0" desc="spotmap505_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap505ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap506" posX="0.804657" posY="0.126984" heading="0" desc="spotmap506_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap506ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap508" posX="0.673997" posY="0.120635" heading="0" desc="spotmap508_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap508ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap509" posX="0.377749" posY="0.4" heading="0" desc="spotmap509_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap509ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap510" posX="0.42044" posY="0.384127" heading="0" desc="spotmap510_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap510ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap511" posX="0.465718" posY="0.380952" heading="0" desc="spotmap511_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap511ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap512" posX="0.597671" posY="0.377778" heading="0" desc="spotmap512_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap512ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap513" posX="0.509702" posY="0.380952" heading="0" desc="spotmap513_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap513ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap514" posX="0.553687" posY="0.380952" heading="0" desc="spotmap514_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap514ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap515" posX="0.641656" posY="0.377778" heading="0" desc="spotmap515_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap515ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap516" posX="0.681759" posY="0.380952" heading="0" desc="spotmap516_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap516ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap517" posX="0.725744" posY="0.377778" heading="0" desc="spotmap517_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap517ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap518" posX="0.772316" posY="0.380952" heading="0" desc="spotmap518_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap518ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap520" posX="0.8163" posY="0.555556" heading="0" desc="spotmap520_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap520ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap521" posX="0.771022" posY="0.561905" heading="0" desc="spotmap521_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap521ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap523" posX="0.689521" posY="0.565079" heading="0" desc="spotmap523_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap523ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap524" posX="0.644243" posY="0.568254" heading="0" desc="spotmap524_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap524ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap525" posX="0.598965" posY="0.555556" heading="0" desc="spotmap525_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap525ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap526" posX="0.554981" posY="0.55873" heading="0" desc="spotmap526_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap526ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap527" posX="0.507115" posY="0.555556" heading="0" desc="spotmap527_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap527ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap528" posX="0.465718" posY="0.555556" heading="0" desc="spotmap528_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap528ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap530" posX="0.375162" posY="0.55873" heading="0" desc="spotmap530_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap530ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap531" posX="0.813713" posY="0.377778" heading="0" desc="spotmap531_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap531ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap532" posX="0.200517" posY="0.847619" heading="0" desc="spotmap532_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano17" jsClick="spotmap532ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap534" posX="0.108668" posY="0.685714" heading="0" desc="spotmap534_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano15" jsClick="spotmap534ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap535" posX="0.0827943" posY="0.742857" heading="0" desc="spotmap535_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano16" jsClick="spotmap535ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap536" posX="0.0776197" posY="0.822222" heading="0" desc="spotmap536_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano18" jsClick="spotmap536ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap537" posX="0.0750323" posY="0.87619" heading="0" desc="spotmap537_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano19" jsClick="spotmap537ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap538" posX="0.0853816" posY="0.746032" heading="0" desc="spotmap538_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano14" jsClick="spotmap538ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap584" posX="0.419146" posY="0.55873" heading="0" desc="spotmap584_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap584ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap586" posX="0.733506" posY="0.561905" heading="0" desc="spotmap586_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano28" jsClick="spotmap586ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap588" posX="0.340233" posY="0.139683" heading="0" desc="spotmap588_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano27" jsClick="spotmap588ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap592" posX="0.886158" posY="0.120635" heading="0" desc="spotmap592_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano26" jsClick="spotmap592ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap593" posX="0.427469" posY="0.761364" heading="0" desc="spotmap593_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano22" jsClick="spotmap593ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap594" posX="0.631173" posY="0.753788" heading="0" desc="spotmap594_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano23" jsClick="spotmap594ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap595" posX="0.694444" posY="0.295455" heading="0" desc="spotmap595_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano24" jsClick="spotmap595ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap596" posX="0.416667" posY="0.287879" heading="0" desc="spotmap596_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano25" jsClick="spotmap596ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap597" posX="0.108025" posY="0.503788" heading="0" desc="spotmap597_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano14" jsClick="spotmap597ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap598" posX="0.242284" posY="0.662879" heading="0" desc="spotmap598_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano9" jsClick="spotmap598ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap599" posX="0.135802" posY="0.848485" heading="0" desc="spotmap599_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano20" jsClick="spotmap599ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
							<spot name="spotmap600" posX="0.177469" posY="0.704545" heading="0" desc="spotmap600_tooltip" descType="tooltip" groupName="" isScene="true" scene="pano19" jsClick="spotmap600ActionSpotFloorPlan">
								<icon url="spots/hotspot_image_user_defaultmap7.png" iconWidth="30" iconHeight="30" iconAnchor="center" />
							</spot>
				</floorplanItem>
			
			
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady-floorPlan">
		set(ptplugin[floorPlan].jsready, true);
	</action>
	
	
		<!-- floorplan main spots counter : 54 -->
			<action name="spotmap490ActionSpotFloorPlan">
          if (xml.scene != pano11,
            mainloadscene(pano11);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap491ActionSpotFloorPlan">
          if (xml.scene != pano27,
            mainloadscene(pano27);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap492ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano107,
            mainloadscene(pano107);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap493ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano107,
            mainloadscene(pano107);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap494ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano11,
            mainloadscene(pano11);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap496ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano27,
            mainloadscene(pano27);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap497ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano14,
            mainloadscene(pano14);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap498ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano21,
            mainloadscene(pano21);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap499ActionSpotFloorPlan">
          if (xml.scene != pano21,
            mainloadscene(pano21);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap500ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano10,
            mainloadscene(pano10);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap501ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano10,
            mainloadscene(pano10);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap503ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap504ActionSpotFloorPlan">
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap505ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap506ActionSpotFloorPlan">
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap508ActionSpotFloorPlan">
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap509ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap510ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap511ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap512ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap513ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap514ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap515ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap516ActionSpotFloorPlan">
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap517ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap518ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap520ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap521ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap523ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap524ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap525ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap526ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap527ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap528ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap530ActionSpotFloorPlan">
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap531ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap532ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano17,
            mainloadscene(pano17);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap534ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano15,
            mainloadscene(pano15);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap535ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano16,
            mainloadscene(pano16);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap536ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano18,
            mainloadscene(pano18);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap537ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano19,
            mainloadscene(pano19);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap538ActionSpotFloorPlan">
          if (xml.scene != pano14,
            mainloadscene(pano14);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
			<action name="spotmap584ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap586ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano28,
            mainloadscene(pano28);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap588ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano27,
            mainloadscene(pano27);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap592ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano26,
            mainloadscene(pano26);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap593ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano22,
            mainloadscene(pano22);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap594ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano23,
            mainloadscene(pano23);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap595ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano24,
            mainloadscene(pano24);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap596ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano25,
            mainloadscene(pano25);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap597ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano14,
            mainloadscene(pano14);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap598ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano9,
            mainloadscene(pano9);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap599ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano20,
            mainloadscene(pano20);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
			<action name="spotmap600ActionSpotFloorPlan">zoomto(get(panoview.fov),smooth(400,20,100));
          if (xml.scene != pano19,
            mainloadscene(pano19);
          );lookat(get(panoview.h), get(panoview.v), get(panoview.fov));</action>
	
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,false););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="floorPlanCloseTourFloorPlan();" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart=""
	keep="true" />
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		showKolorArea-floorPlanArea(false);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		ifnot(ptplugin[floorPlanArea].isOpen,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.fov)));
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems[0].selectedItem, %2);
		
		ifnot(%1 == "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.fov));
		);
		
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearch, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		set(defaultfloorplaniteminc-wait,50);
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem.count , inc(defaultfloorplaniteminc),
			if(defaultfloorplaniteminc-wait == defaultfloorplaniteminc,
				add(defaultfloorplaniteminc-wait,50);
				wait(0);
			);
			if(floorPlanSpotSearch == true,
				
				if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
						set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[fpitemmain].name));
					);
				);
			);
			if(floorPlanSpotSearch == true,
				set(defaultspotinc-wait,50);
				for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
					if(defaultspotinc-wait == defaultspotinc,
						add(defaultspotinc-wait,50);
						wait(0);
					);
					if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearch, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems[0].selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems[0].selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="project_floor_title" type="string" />
		<option name="title_font" value="Verdana" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="background_color" value="ffffff" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="ffffff" type="string" />
		<option name="overlay_alpha" value="0" type="float" />
		<option name="padding" value="0" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="ffffff" type="string" />
		<option name="area_width" value="50" type="int" />
		<option name="area_height" value="50" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea-floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback-floorPlanArea')" type="string" />
		<option name="zorder" value="6" type="int" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady-floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);
	</action>
	
	<action name="openKolorArea-floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			set(ptplugin[floorPlanArea].isOpen, true);
			set(ptplugin[floorPlanArea].visible, true);
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			pauseautorotation(forceplugin);
			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea-floorplanDIV"&gt;&lt;/div&gt;));
			events.dispatch(onremovedisplayedobject);
		);
	</action>
	
	<action name="closeKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			resumeautorotation(forceplugin);
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
			set(ptplugin[floorPlanArea].isOpen, false);
		);
	</action>
	
	<action name="toggleKolorArea-floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea-floorPlanArea();
		,
			openKolorArea-floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback-floorPlanArea">
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();
	</action>
	
	<action name="changeTitleKolorArea-floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea-floorPlanArea">
		set(ptplugin[floorPlanArea].visible, true);
		set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		pauseautorotation(forceplugin);
		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	</action>
		
	<action name="hideKolorArea-floorPlanArea">
		resumeautorotation(forceplugin);
		set(ptplugin[floorPlanArea].visible, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
	</action>
	
	<events name="kolorAreaEvents-floorPlanArea" 
		keep="true"
		onremovepano="if(ptplugin[floorPlanArea].visible,hideFloorplan(););"
	/>
	
	
  <!-- ************ -->
  <!-- Logo : viewport / bottomleft -->
  <!-- ************ -->

  <layer align="bottomleft"
         x="10"
         y="10"
         zorder="7"
         name="logo1"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logo1tooltipText"
			onhover="showTooltip(bottomleft,'');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo1/logoc.png" 
         onclick="openurl(http://camaleon360.com/es/,_blank);"


         />

  <events name="logo1events" 
    onTourStart="showlogo1();"
    keep="true" />

  <action name="hidelogo1">
    set(layer[logo1].visible, false);
  </action>
  <action name="showlogo1">
      set(layer[logo1].visible, true);
  </action>



<action name="setViewPannini">
	stopSetViewTweens();
	setViewPanniniComplete();
</action>

<action name="setViewPanniniComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == false, set(backtonormalfirst,true); );
		if(view.stereographic == false, set(backtonormalfirst,true); );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, true);
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action><action name="setViewFisheye">
	stopSetViewTweens();
	setViewFisheyeComplete();
</action>

<action name="setViewFisheyeComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.fovmax, 179, 0.25);
			set(view.fisheyefovlink, 1.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
			tween(view.fisheye, 0.40, distance(1.0, 1.25));
			tween(view.vlookat, get(panoview.v), 1.25);
		);
	);
</action><action name="setViewStereographic">
	stopSetViewTweens();
	setViewStereographicComplete();
</action>

<action name="setViewStereographicComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.vlookat, get(panoview.v), 1.25);
		if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
	);
</action>
  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action><action name="setViewFisheyeBall">
	stopSetViewTweens();
	setViewFisheyeBallComplete();
</action>

<action name="setViewFisheyeBallComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad, 
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.30), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			if(panoview.fovmax LE 179, set(view.fovmax, 179); , set(view.fovmax, get(panoview.fovmax)); );
			tween(view.fov, 179, 4.0, easeInOutQuad );
			tween(view.vlookat, get(panoview.v), 1.25);
			set(display.details, 22);
		);
	);
</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>